/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
package org.pabloid.javaparser;

public class JavaParser implements JavaParserConstants
{

    public JavaParser(String input)
    {
        this(new org.pabloid.io.StringReader(input));
    }

    public void reInit(String input)
    {
        reInit(new org.pabloid.io.StringReader(input));
    }

    final public void checkSyntax() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case PACKAGE:
                PackageDeclaration();
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
        }
        label_1:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case IMPORT:

                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }
            ImportDeclaration();
        }
        label_2:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case CLASS:
                case FINAL:
                case INTERFACE:
                case PUBLIC:
                case SEMICOLON:

                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
            TypeDeclaration();
        }
        consumeToken(0);
    }

    final public void PackageDeclaration() throws JavaParserException
    {
        consumeToken(PACKAGE);
        Name();
        consumeToken(SEMICOLON);
    }

    final public void ImportDeclaration() throws JavaParserException
    {
        consumeToken(IMPORT);
        Name();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case DOT:
                consumeToken(DOT);
                consumeToken(STAR);
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
    }

    final public void TypeDeclaration() throws JavaParserException
    {
        if (jj_2_1(0x7fffffff))
            ClassDeclaration();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case INTERFACE:
                case PUBLIC:
                    InterfaceDeclaration();
                    break;
                case SEMICOLON:
                    consumeToken(SEMICOLON);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    /*
     * Declaration syntax follows.
     */
    final public void ClassDeclaration() throws JavaParserException
    {
        label_3:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case FINAL:
                case PUBLIC:
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_3;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                    consumeToken(ABSTRACT);
                    break;
                case FINAL:
                    consumeToken(FINAL);
                    break;
                case PUBLIC:
                    consumeToken(PUBLIC);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
        }
        consumeToken(CLASS);
        consumeToken(IDENTIFIER);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case EXTENDS:
                consumeToken(EXTENDS);
                Name();
                break;
            default:
                jj_la1[7] = jj_gen;
        }
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case IMPLEMENTS:
                consumeToken(IMPLEMENTS);
                NameList();
                break;
            default:
                jj_la1[8] = jj_gen;
        }
        consumeToken(LBRACE);
        label_4:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_4;
            }
            ClassBodyDeclaration();
        }
        consumeToken(RBRACE);
    }

    final public void ClassBodyDeclaration() throws JavaParserException
    {
        if (jj_2_2(2))
            StaticInitializer();
        else if (jj_2_3(0x7fffffff))
            ConstructorDeclaration();
        else if (jj_2_4(0x7fffffff))
            ClassDeclaration();
        else if (jj_2_5(0x7fffffff))
            MethodDeclaration();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
                case IDENTIFIER:
                    FieldDeclaration();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

// This production is to determine lookahead only.
    final public void MethodDeclarationLookahead() throws JavaParserException
    {
        label_5:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case FINAL:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case SYNCHRONIZED:
                    ;
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    break label_5;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case PUBLIC:
                    consumeToken(PUBLIC);
                    break;
                case PROTECTED:
                    consumeToken(PROTECTED);
                    break;
                case PRIVATE:
                    consumeToken(PRIVATE);
                    break;
                case STATIC:
                    consumeToken(STATIC);
                    break;
                case ABSTRACT:
                    consumeToken(ABSTRACT);
                    break;
                case FINAL:
                    consumeToken(FINAL);
                    break;
                case NATIVE:
                    consumeToken(NATIVE);
                    break;
                case SYNCHRONIZED:
                    consumeToken(SYNCHRONIZED);
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
        }
        ResultType();
        consumeToken(IDENTIFIER);
        consumeToken(LPAREN);
    }

    final public void InterfaceDeclaration() throws JavaParserException
    {
        label_6:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case PUBLIC:
                    ;
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    break label_6;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                    consumeToken(ABSTRACT);
                    break;
                case PUBLIC:
                    consumeToken(PUBLIC);
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
        }
        consumeToken(INTERFACE);
        consumeToken(IDENTIFIER);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case EXTENDS:
                consumeToken(EXTENDS);
                NameList();
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
        }
        consumeToken(LBRACE);
        label_7:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    break label_7;
            }
            InterfaceMemberDeclaration();
        }
        consumeToken(RBRACE);
    }

    final public void InterfaceMemberDeclaration() throws JavaParserException
    {
        if (jj_2_6(0x7fffffff))
            MethodDeclaration();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
                case IDENTIFIER:
                    FieldDeclaration();
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void FieldDeclaration() throws JavaParserException
    {
        label_8:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case FINAL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
                    ;
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    break label_8;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case PUBLIC:
                    consumeToken(PUBLIC);
                    break;
                case PROTECTED:
                    consumeToken(PROTECTED);
                    break;
                case PRIVATE:
                    consumeToken(PRIVATE);
                    break;
                case STATIC:
                    consumeToken(STATIC);
                    break;
                case FINAL:
                    consumeToken(FINAL);
                    break;
                case TRANSIENT:
                    consumeToken(TRANSIENT);
                    break;
                case VOLATILE:
                    consumeToken(VOLATILE);
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
        }
        Type();
        VariableDeclarator();
        label_9:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_9;
            }
            consumeToken(COMMA);
            VariableDeclarator();
        }
        consumeToken(SEMICOLON);
    }

    final public void VariableDeclarator() throws JavaParserException
    {
        VariableDeclaratorId();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case ASSIGN:
                consumeToken(ASSIGN);
                VariableInitializer();
                break;
            default:
                jj_la1[21] = jj_gen;
                ;
        }
    }

    final public void VariableDeclaratorId() throws JavaParserException
    {
        consumeToken(IDENTIFIER);
        label_10:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_10;
            }
            consumeToken(LBRACKET);
            consumeToken(RBRACKET);
        }
    }

    final public void VariableInitializer() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case LBRACE:
                consumeToken(LBRACE);
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case FALSE:
                    case NEW:
                    case NULL:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case LBRACE:
                    case BANG:
                    case TILDE:
                    case INCR:
                    case DECR:
                    case PLUS:
                    case MINUS:
                        VariableInitializer();
                        label_11:
                        while (true)
                        {
                            if (jj_2_7(2)); else
                                break label_11;
                            consumeToken(COMMA);
                            VariableInitializer();
                        }
                        break;
                    default:
                        jj_la1[23] = jj_gen;
                        ;
                }
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case COMMA:
                        consumeToken(COMMA);
                        break;
                    default:
                        jj_la1[24] = jj_gen;
                        ;
                }
                consumeToken(RBRACE);
                break;
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                Expression();
                break;
            default:
                jj_la1[25] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void MethodDeclaration() throws JavaParserException
    {
        label_12:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case ABSTRACT:
                case FINAL:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case SYNCHRONIZED:
                    ;
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_12;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case PUBLIC:
                    consumeToken(PUBLIC);
                    break;
                case PROTECTED:
                    consumeToken(PROTECTED);
                    break;
                case PRIVATE:
                    consumeToken(PRIVATE);
                    break;
                case STATIC:
                    consumeToken(STATIC);
                    break;
                case ABSTRACT:
                    consumeToken(ABSTRACT);
                    break;
                case FINAL:
                    consumeToken(FINAL);
                    break;
                case NATIVE:
                    consumeToken(NATIVE);
                    break;
                case SYNCHRONIZED:
                    consumeToken(SYNCHRONIZED);
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
        }
        ResultType();
        MethodDeclarator();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case THROWS:
                consumeToken(THROWS);
                NameList();
                break;
            default:
                jj_la1[28] = jj_gen;
                ;
        }
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case LBRACE:
                Block();
                break;
            case SEMICOLON:
                consumeToken(SEMICOLON);
                break;
            default:
                jj_la1[29] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void MethodDeclarator() throws JavaParserException
    {
        consumeToken(IDENTIFIER);
        FormalParameters();
        label_13:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_13;
            }
            consumeToken(LBRACKET);
            consumeToken(RBRACKET);
        }
    }

    final public void FormalParameters() throws JavaParserException
    {
        consumeToken(LPAREN);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                FormalParameter();
                label_14:
                while (true)
                {
                    switch ((tokenType == -1) ? getToken() : tokenType)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[31] = jj_gen;
                            break label_14;
                    }
                    consumeToken(COMMA);
                    FormalParameter();
                }
                break;
            default:
                jj_la1[32] = jj_gen;
                ;
        }
        consumeToken(RPAREN);
    }

    final public void FormalParameter() throws JavaParserException
    {
        Type();
        VariableDeclaratorId();
    }

    final public void ConstructorDeclaration() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case PUBLIC:
                        consumeToken(PUBLIC);
                        break;
                    case PROTECTED:
                        consumeToken(PROTECTED);
                        break;
                    case PRIVATE:
                        consumeToken(PRIVATE);
                        break;
                    default:
                        jj_la1[33] = jj_gen;
                        consumeToken(-1);
                        throw new JavaParserException();
                }
                break;
            default:
                jj_la1[34] = jj_gen;
                ;
        }
        consumeToken(IDENTIFIER);
        FormalParameters();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case THROWS:
                consumeToken(THROWS);
                NameList();
                break;
            default:
                jj_la1[35] = jj_gen;
                ;
        }
        consumeToken(LBRACE);
        if (jj_2_8(2))
            ExplicitConstructorInvocation();
        else;
        label_15:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                    ;
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    break label_15;
            }
            BlockStatement();
        }
        consumeToken(RBRACE);
    }

    final public void ExplicitConstructorInvocation() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case THIS:
                consumeToken(THIS);
                Arguments();
                consumeToken(SEMICOLON);
                break;
            case SUPER:
                consumeToken(SUPER);
                Arguments();
                consumeToken(SEMICOLON);
                break;
            default:
                jj_la1[37] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void StaticInitializer() throws JavaParserException
    {
        consumeToken(STATIC);
        Block();
    }

    /*
     * Type, name and expression syntax follows.
     */
    final public void Type() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                PrimitiveType();
                break;
            case IDENTIFIER:
                Name();
                break;
            default:
                jj_la1[38] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
        label_16:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    break label_16;
            }
            consumeToken(LBRACKET);
            consumeToken(RBRACKET);
        }
    }

    final public void PrimitiveType() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case BOOLEAN:
                consumeToken(BOOLEAN);
                break;
            case CHAR:
                consumeToken(CHAR);
                break;
            case BYTE:
                consumeToken(BYTE);
                break;
            case SHORT:
                consumeToken(SHORT);
                break;
            case INT:
                consumeToken(INT);
                break;
            case LONG:
                consumeToken(LONG);
                break;
            case FLOAT:
                consumeToken(FLOAT);
                break;
            case DOUBLE:
                consumeToken(DOUBLE);
                break;
            default:
                jj_la1[40] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void ResultType() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case VOID:
                consumeToken(VOID);
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                Type();
                break;
            default:
                jj_la1[41] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void Name() throws JavaParserException
    {
        consumeToken(IDENTIFIER);
        label_17:
        while (true)
        {
            if (jj_2_9(2)); else
                break label_17;
            consumeToken(DOT);
            consumeToken(IDENTIFIER);
        }
    }

    final public void NameList() throws JavaParserException
    {
        Name();
        label_18:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[42] = jj_gen;
                    break label_18;
            }
            consumeToken(COMMA);
            Name();
        }
    }

    /*
     * Expression syntax follows.
     */
    final public void Expression() throws JavaParserException
    {
        if (jj_2_10(0x7fffffff))
            Assignment();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    ConditionalExpression();
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void Assignment() throws JavaParserException
    {
        PrimaryExpression();
        AssignmentOperator();
        Expression();
    }

    final public void AssignmentOperator() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case ASSIGN:
                consumeToken(ASSIGN);
                break;
            case STARASSIGN:
                consumeToken(STARASSIGN);
                break;
            case SLASHASSIGN:
                consumeToken(SLASHASSIGN);
                break;
            case REMASSIGN:
                consumeToken(REMASSIGN);
                break;
            case PLUSASSIGN:
                consumeToken(PLUSASSIGN);
                break;
            case MINUSASSIGN:
                consumeToken(MINUSASSIGN);
                break;
            case LSHIFTASSIGN:
                consumeToken(LSHIFTASSIGN);
                break;
            case RSIGNEDSHIFTASSIGN:
                consumeToken(RSIGNEDSHIFTASSIGN);
                break;
            case RUNSIGNEDSHIFTASSIGN:
                consumeToken(RUNSIGNEDSHIFTASSIGN);
                break;
            case ANDASSIGN:
                consumeToken(ANDASSIGN);
                break;
            case XORASSIGN:
                consumeToken(XORASSIGN);
                break;
            case ORASSIGN:
                consumeToken(ORASSIGN);
                break;
            default:
                jj_la1[44] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void ConditionalExpression() throws JavaParserException
    {
        ConditionalOrExpression();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case HOOK:
                consumeToken(HOOK);
                Expression();
                consumeToken(COLON);
                ConditionalExpression();
                break;
            default:
                jj_la1[45] = jj_gen;
                ;
        }
    }

    final public void ConditionalOrExpression() throws JavaParserException
    {
        ConditionalAndExpression();
        label_19:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case SC_OR:
                    ;
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    break label_19;
            }
            consumeToken(SC_OR);
            ConditionalAndExpression();
        }
    }

    final public void ConditionalAndExpression() throws JavaParserException
    {
        InclusiveOrExpression();
        label_20:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case SC_AND:
                    ;
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    break label_20;
            }
            consumeToken(SC_AND);
            InclusiveOrExpression();
        }
    }

    final public void InclusiveOrExpression() throws JavaParserException
    {
        ExclusiveOrExpression();
        label_21:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    break label_21;
            }
            consumeToken(BIT_OR);
            ExclusiveOrExpression();
        }
    }

    final public void ExclusiveOrExpression() throws JavaParserException
    {
        AndExpression();
        label_22:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case XOR:
                    ;
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    break label_22;
            }
            consumeToken(XOR);
            AndExpression();
        }
    }

    final public void AndExpression() throws JavaParserException
    {
        EqualityExpression();
        label_23:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BIT_AND:
                    ;
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    break label_23;
            }
            consumeToken(BIT_AND);
            EqualityExpression();
        }
    }

    final public void EqualityExpression() throws JavaParserException
    {
        InstanceOfExpression();
        label_24:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case EQ:
                case NE:
                    ;
                    break;
                default:
                    jj_la1[51] = jj_gen;
                    break label_24;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case EQ:
                    consumeToken(EQ);
                    break;
                case NE:
                    consumeToken(NE);
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
            InstanceOfExpression();
        }
    }

    final public void InstanceOfExpression() throws JavaParserException
    {
        RelationalExpression();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case INSTANCEOF:
                consumeToken(INSTANCEOF);
                Type();
                break;
            default:
                jj_la1[53] = jj_gen;
                ;
        }
    }

    final public void RelationalExpression() throws JavaParserException
    {
        ShiftExpression();
        label_25:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case GT:
                case LT:
                case LE:
                case GE:
                    ;
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    break label_25;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LT:
                    consumeToken(LT);
                    break;
                case GT:
                    consumeToken(GT);
                    break;
                case LE:
                    consumeToken(LE);
                    break;
                case GE:
                    consumeToken(GE);
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
            ShiftExpression();
        }
    }

    final public void ShiftExpression() throws JavaParserException
    {
        AdditiveExpression();
        label_26:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LSHIFT:
                case RSIGNEDSHIFT:
                case RUNSIGNEDSHIFT:
                    ;
                    break;
                default:
                    jj_la1[56] = jj_gen;
                    break label_26;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LSHIFT:
                    consumeToken(LSHIFT);
                    break;
                case RSIGNEDSHIFT:
                    consumeToken(RSIGNEDSHIFT);
                    break;
                case RUNSIGNEDSHIFT:
                    consumeToken(RUNSIGNEDSHIFT);
                    break;
                default:
                    jj_la1[57] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
            AdditiveExpression();
        }
    }

    final public void AdditiveExpression() throws JavaParserException
    {
        MultiplicativeExpression();
        label_27:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case PLUS:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    break label_27;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case PLUS:
                    consumeToken(PLUS);
                    break;
                case MINUS:
                    consumeToken(MINUS);
                    break;
                default:
                    jj_la1[59] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
            MultiplicativeExpression();
        }
    }

    final public void MultiplicativeExpression() throws JavaParserException
    {
        UnaryExpression();
        label_28:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case STAR:
                case SLASH:
                case REM:
                    ;
                    break;
                default:
                    jj_la1[60] = jj_gen;
                    break label_28;
            }
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case STAR:
                    consumeToken(STAR);
                    break;
                case SLASH:
                    consumeToken(SLASH);
                    break;
                case REM:
                    consumeToken(REM);
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
            UnaryExpression();
        }
    }

    final public void UnaryExpression() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case PLUS:
            case MINUS:
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case PLUS:
                        consumeToken(PLUS);
                        break;
                    case MINUS:
                        consumeToken(MINUS);
                        break;
                    default:
                        jj_la1[62] = jj_gen;
                        consumeToken(-1);
                        throw new JavaParserException();
                }
                UnaryExpression();
                break;
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
                UnaryExpressionNotPlusMinus();
                break;
            default:
                jj_la1[63] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void PreIncrementExpression() throws JavaParserException
    {
        consumeToken(INCR);
        PrimaryExpression();
    }

    final public void PreDecrementExpression() throws JavaParserException
    {
        consumeToken(DECR);
        PrimaryExpression();
    }

    final public void UnaryExpressionNotPlusMinus() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case BANG:
            case TILDE:
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case TILDE:
                        consumeToken(TILDE);
                        break;
                    case BANG:
                        consumeToken(BANG);
                        break;
                    default:
                        jj_la1[64] = jj_gen;
                        consumeToken(-1);
                        throw new JavaParserException();
                }
                UnaryExpression();
                break;
            default:
                jj_la1[65] = jj_gen;
                if (jj_2_11(0x7fffffff))
                    CastExpression();
                else
                    switch ((tokenType == -1) ? getToken() : tokenType)
                    {
                        case FALSE:
                        case NEW:
                        case NULL:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            PostfixExpression();
                            break;
                        default:
                            jj_la1[66] = jj_gen;
                            consumeToken(-1);
                            throw new JavaParserException();
                    }
        }
    }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
    final public void CastLookahead() throws JavaParserException
    {
        if (jj_2_12(2))
        {
            consumeToken(LPAREN);
            PrimitiveType();
        } else if (jj_2_13(0x7fffffff))
        {
            consumeToken(LPAREN);
            Name();
            consumeToken(LBRACKET);
            consumeToken(RBRACKET);
        } else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LPAREN:
                    consumeToken(LPAREN);
                    Name();
                    consumeToken(RPAREN);
                    switch ((tokenType == -1) ? getToken() : tokenType)
                    {
                        case TILDE:
                            consumeToken(TILDE);
                            break;
                        case BANG:
                            consumeToken(BANG);
                            break;
                        case LPAREN:
                            consumeToken(LPAREN);
                            break;
                        case IDENTIFIER:
                            consumeToken(IDENTIFIER);
                            break;
                        case THIS:
                            consumeToken(THIS);
                            break;
                        case SUPER:
                            consumeToken(SUPER);
                            break;
                        case NEW:
                            consumeToken(NEW);
                            break;
                        case FALSE:
                        case NULL:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                            Literal();
                            break;
                        default:
                            jj_la1[67] = jj_gen;
                            consumeToken(-1);
                            throw new JavaParserException();
                    }
                    break;
                default:
                    jj_la1[68] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void PostfixExpression() throws JavaParserException
    {
        PrimaryExpression();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case INCR:
            case DECR:
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case INCR:
                        consumeToken(INCR);
                        break;
                    case DECR:
                        consumeToken(DECR);
                        break;
                    default:
                        jj_la1[69] = jj_gen;
                        consumeToken(-1);
                        throw new JavaParserException();
                }
                break;
            default:
                jj_la1[70] = jj_gen;
                ;
        }
    }

    final public void CastExpression() throws JavaParserException
    {
        if (jj_2_14(2))
        {
            consumeToken(LPAREN);
            PrimitiveType();
            label_29:
            while (true)
            {
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case LBRACKET:
                        ;
                        break;
                    default:
                        jj_la1[71] = jj_gen;
                        break label_29;
                }
                consumeToken(LBRACKET);
                consumeToken(RBRACKET);
            }
            consumeToken(RPAREN);
            UnaryExpression();
        } else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LPAREN:
                    consumeToken(LPAREN);
                    Name();
                    label_30:
                    while (true)
                    {
                        switch ((tokenType == -1) ? getToken() : tokenType)
                        {
                            case LBRACKET:
                                ;
                                break;
                            default:
                                jj_la1[72] = jj_gen;
                                break label_30;
                        }
                        consumeToken(LBRACKET);
                        consumeToken(RBRACKET);
                    }
                    consumeToken(RPAREN);
                    UnaryExpressionNotPlusMinus();
                    break;
                default:
                    jj_la1[73] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void PrimaryExpression() throws JavaParserException
    {
        PrimaryPrefix();
        label_31:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LPAREN:
                case LBRACKET:
                case DOT:
                    ;
                    break;
                default:
                    jj_la1[74] = jj_gen;
                    break label_31;
            }
            PrimarySuffix();
        }
    }

    final public void PrimaryPrefix() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FALSE:
            case NULL:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                Literal();
                break;
            case IDENTIFIER:
                Name();
                break;
            case THIS:
                consumeToken(THIS);
                break;
            case SUPER:
                consumeToken(SUPER);
                consumeToken(DOT);
                consumeToken(IDENTIFIER);
                break;
            case LPAREN:
                consumeToken(LPAREN);
                Expression();
                consumeToken(RPAREN);
                break;
            case NEW:
                AllocationExpression();
                break;
            default:
                jj_la1[75] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void PrimarySuffix() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case LBRACKET:
                consumeToken(LBRACKET);
                Expression();
                consumeToken(RBRACKET);
                break;
            case DOT:
                consumeToken(DOT);
                consumeToken(IDENTIFIER);
                break;
            case LPAREN:
                Arguments();
                break;
            default:
                jj_la1[76] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void Literal() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case INTEGER_LITERAL:
                consumeToken(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                consumeToken(FLOATING_POINT_LITERAL);
                break;
            case CHARACTER_LITERAL:
                consumeToken(CHARACTER_LITERAL);
                break;
            case STRING_LITERAL:
                consumeToken(STRING_LITERAL);
                break;
            case FALSE:
            case TRUE:
                BooleanLiteral();
                break;
            case NULL:
                NullLiteral();
                break;
            default:
                jj_la1[77] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void BooleanLiteral() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case TRUE:
                consumeToken(TRUE);
                break;
            case FALSE:
                consumeToken(FALSE);
                break;
            default:
                jj_la1[78] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void NullLiteral() throws JavaParserException
    {
        consumeToken(NULL);
    }

    final public void Arguments() throws JavaParserException
    {
        consumeToken(LPAREN);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                ArgumentList();
                break;
            default:
                jj_la1[79] = jj_gen;
                ;
        }
        consumeToken(RPAREN);
    }

    final public void ArgumentList() throws JavaParserException
    {
        Expression();
        label_32:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[80] = jj_gen;
                    break label_32;
            }
            consumeToken(COMMA);
            Expression();
        }
    }

    final public void AllocationExpression() throws JavaParserException
    {
        if (jj_2_15(2))
        {
            consumeToken(NEW);
            PrimitiveType();
            ArrayDimensions();
        } else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case NEW:
                    consumeToken(NEW);
                    Name();
                    switch ((tokenType == -1) ? getToken() : tokenType)
                    {
                        case LPAREN:
                            Arguments();
                            break;
                        case LBRACKET:
                            ArrayDimensions();
                            break;
                        default:
                            jj_la1[81] = jj_gen;
                            consumeToken(-1);
                            throw new JavaParserException();
                    }
                    break;
                default:
                    jj_la1[82] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    /*
     * The second LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     */
    final public void ArrayDimensions() throws JavaParserException
    {
        label_33:
        while (true)
        {
            consumeToken(LBRACKET);
            Expression();
            consumeToken(RBRACKET);
            if (jj_2_16(2)); else
                break label_33;
        }
        label_34:
        while (true)
        {
            if (jj_2_17(2)); else
                break label_34;
            consumeToken(LBRACKET);
            consumeToken(RBRACKET);
        }
    }

    /*
     * Statement syntax follows.
     */
    final public void Statement() throws JavaParserException
    {
        if (jj_2_18(2))
            LabeledStatement();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case LBRACE:
                    Block();
                    break;
                case SEMICOLON:
                    EmptyStatement();
                    break;
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    StatementExpression();
                    consumeToken(SEMICOLON);
                    break;
                case SWITCH:
                    SwitchStatement();
                    break;
                case IF:
                    IfStatement();
                    break;
                case WHILE:
                    WhileStatement();
                    break;
                case DO:
                    DoStatement();
                    break;
                case FOR:
                    ForStatement();
                    break;
                case BREAK:
                    BreakStatement();
                    break;
                case CONTINUE:
                    ContinueStatement();
                    break;
                case RETURN:
                    ReturnStatement();
                    break;
                case THROW:
                    ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    SynchronizedStatement();
                    break;
                case TRY:
                    TryStatement();
                    break;
                default:
                    jj_la1[83] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void LabeledStatement() throws JavaParserException
    {
        consumeToken(IDENTIFIER);
        consumeToken(COLON);
        Statement();
    }

    final public void Block() throws JavaParserException
    {
        consumeToken(LBRACE);
        label_35:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                    ;
                    break;
                default:
                    jj_la1[84] = jj_gen;
                    break label_35;
            }
            BlockStatement();
        }
        consumeToken(RBRACE);
    }

    final public void BlockStatement() throws JavaParserException
    {
        if (jj_2_19(0x7fffffff))
        {
            LocalVariableDeclaration();
            consumeToken(SEMICOLON);
        } else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case BREAK:
                case CONTINUE:
                case DO:
                case FALSE:
                case FOR:
                case IF:
                case NEW:
                case NULL:
                case RETURN:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                    Statement();
                    break;
                default:
                    jj_la1[85] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void LocalVariableDeclaration() throws JavaParserException
    {
        Type();
        VariableDeclarator();
        label_36:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[86] = jj_gen;
                    break label_36;
            }
            consumeToken(COMMA);
            VariableDeclarator();
        }
    }

    final public void EmptyStatement() throws JavaParserException
    {
        consumeToken(SEMICOLON);
    }

    final public void StatementExpression() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            default:
                jj_la1[87] = jj_gen;
                if (jj_2_20(0x7fffffff))
                    Assignment();
                else
                    switch ((tokenType == -1) ? getToken() : tokenType)
                    {
                        case FALSE:
                        case NEW:
                        case NULL:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            PostfixExpression();
                            break;
                        default:
                            jj_la1[88] = jj_gen;
                            consumeToken(-1);
                            throw new JavaParserException();
                    }
        }
    }

    final public void SwitchStatement() throws JavaParserException
    {
        consumeToken(SWITCH);
        consumeToken(LPAREN);
        Expression();
        consumeToken(RPAREN);
        consumeToken(LBRACE);
        label_37:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case CASE:
                case _DEFAULT:
                    ;
                    break;
                default:
                    jj_la1[89] = jj_gen;
                    break label_37;
            }
            SwitchLabel();
            label_38:
            while (true)
            {
                switch ((tokenType == -1) ? getToken() : tokenType)
                {
                    case BOOLEAN:
                    case BREAK:
                    case BYTE:
                    case CHAR:
                    case CONTINUE:
                    case DO:
                    case DOUBLE:
                    case FALSE:
                    case FLOAT:
                    case FOR:
                    case IF:
                    case INT:
                    case LONG:
                    case NEW:
                    case NULL:
                    case RETURN:
                    case SHORT:
                    case SUPER:
                    case SWITCH:
                    case SYNCHRONIZED:
                    case THIS:
                    case THROW:
                    case TRUE:
                    case TRY:
                    case WHILE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case LBRACE:
                    case SEMICOLON:
                    case INCR:
                    case DECR:
                        ;
                        break;
                    default:
                        jj_la1[90] = jj_gen;
                        break label_38;
                }
                BlockStatement();
            }
        }
        consumeToken(RBRACE);
    }

    final public void SwitchLabel() throws JavaParserException
    {
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case CASE:
                consumeToken(CASE);
                Expression();
                consumeToken(COLON);
                break;
            case _DEFAULT:
                consumeToken(_DEFAULT);
                consumeToken(COLON);
                break;
            default:
                jj_la1[91] = jj_gen;
                consumeToken(-1);
                throw new JavaParserException();
        }
    }

    final public void IfStatement() throws JavaParserException
    {
        consumeToken(IF);
        consumeToken(LPAREN);
        Expression();
        consumeToken(RPAREN);
        Statement();
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case ELSE:
                consumeToken(ELSE);
                Statement();
                break;
            default:
                jj_la1[92] = jj_gen;
                ;
        }
    }

    final public void WhileStatement() throws JavaParserException
    {
        consumeToken(WHILE);
        consumeToken(LPAREN);
        Expression();
        consumeToken(RPAREN);
        Statement();
    }

    final public void DoStatement() throws JavaParserException
    {
        consumeToken(DO);
        Statement();
        consumeToken(WHILE);
        consumeToken(LPAREN);
        Expression();
        consumeToken(RPAREN);
        consumeToken(SEMICOLON);
    }

    final public void ForStatement() throws JavaParserException
    {
        consumeToken(FOR);
        consumeToken(LPAREN);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
                ForInit();
                break;
            default:
                jj_la1[93] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                Expression();
                break;
            default:
                jj_la1[94] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
                ForUpdate();
                break;
            default:
                jj_la1[95] = jj_gen;
                ;
        }
        consumeToken(RPAREN);
        Statement();
    }

    final public void ForInit() throws JavaParserException
    {
        if (jj_2_21(0x7fffffff))
            LocalVariableDeclaration();
        else
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    StatementExpressionList();
                    break;
                default:
                    jj_la1[96] = jj_gen;
                    consumeToken(-1);
                    throw new JavaParserException();
            }
    }

    final public void StatementExpressionList() throws JavaParserException
    {
        StatementExpression();
        label_39:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[97] = jj_gen;
                    break label_39;
            }
            consumeToken(COMMA);
            StatementExpression();
        }
    }

    final public void ForUpdate() throws JavaParserException
    {
        StatementExpressionList();
    }

    final public void BreakStatement() throws JavaParserException
    {
        consumeToken(BREAK);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case IDENTIFIER:
                consumeToken(IDENTIFIER);
                break;
            default:
                jj_la1[98] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
    }

    final public void ContinueStatement() throws JavaParserException
    {
        consumeToken(CONTINUE);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case IDENTIFIER:
                consumeToken(IDENTIFIER);
                break;
            default:
                jj_la1[99] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
    }

    final public void ReturnStatement() throws JavaParserException
    {
        consumeToken(RETURN);
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                Expression();
                break;
            default:
                jj_la1[100] = jj_gen;
                ;
        }
        consumeToken(SEMICOLON);
    }

    final public void ThrowStatement() throws JavaParserException
    {
        consumeToken(THROW);
        Expression();
        consumeToken(SEMICOLON);
    }

    final public void SynchronizedStatement() throws JavaParserException
    {
        consumeToken(SYNCHRONIZED);
        consumeToken(LPAREN);
        Expression();
        consumeToken(RPAREN);
        Block();
    }

    final public void TryStatement() throws JavaParserException
    {
        consumeToken(TRY);
        Block();
        label_40:
        while (true)
        {
            switch ((tokenType == -1) ? getToken() : tokenType)
            {
                case CATCH:
                    ;
                    break;
                default:
                    jj_la1[101] = jj_gen;
                    break label_40;
            }
            consumeToken(CATCH);
            consumeToken(LPAREN);
            FormalParameter();
            consumeToken(RPAREN);
            Block();
        }
        switch ((tokenType == -1) ? getToken() : tokenType)
        {
            case FINALLY:
                consumeToken(FINALLY);
                Block();
                break;
            default:
                jj_la1[102] = jj_gen;
                ;
        }
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_1();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_2();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_3();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_4();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_5();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_6();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_7();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_8();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_9();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_10();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_11();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_12();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_13();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_14();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_15();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_16();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_17();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_18();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_19();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_20();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_21();
        } catch (LookaheadSuccess ls)
        {
            return true;
        } finally
        {
            jj_save(20, xla);
        }
    }

    private boolean jj_3R_119()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(94))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(95))
                return true;
        }
        if (jj_3R_117())
            return true;
        return false;
    }

    private boolean jj_3R_117()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_119())
        {
            jj_scanpos = xsp;
            if (jj_3R_120())
            {
                jj_scanpos = xsp;
                if (jj_3R_121())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_122())
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_116()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(81))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(80))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(87))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(88))
                        return true;
                }
            }
        }
        if (jj_3R_111())
            return true;
        return false;
    }

    private boolean jj_3R_114()
    {
        if (jj_scan_token(INSTANCEOF))
            return true;
        if (jj_3R_55())
            return true;
        return false;
    }

    private boolean jj_3R_115()
    {
        if (jj_3R_117())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_127())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_112()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(86))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(89))
                return true;
        }
        if (jj_3R_107())
            return true;
        return false;
    }

    private boolean jj_3R_113()
    {
        if (jj_3R_115())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_123())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_111()
    {
        if (jj_3R_113())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_118())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_110()
    {
        if (jj_scan_token(BIT_AND))
            return true;
        if (jj_3R_105())
            return true;
        return false;
    }

    private boolean jj_3R_95()
    {
        if (jj_3R_93())
            return true;
        return false;
    }

    private boolean jj_3R_60()
    {
        if (jj_3R_53())
            return true;
        return false;
    }

    private boolean jj_3R_47()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_59())
        {
            jj_scanpos = xsp;
            if (jj_3R_60())
                return true;
        }
        return false;
    }

    private boolean jj_3R_59()
    {
        if (jj_scan_token(LBRACE))
            return true;
        return false;
    }

    private boolean jj_3R_109()
    {
        if (jj_3R_111())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_116())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_106()
    {
        if (jj_scan_token(BIT_OR))
            return true;
        if (jj_3R_100())
            return true;
        return false;
    }

    private boolean jj_3_18()
    {
        if (jj_3R_54())
            return true;
        return false;
    }

    private boolean jj_3R_108()
    {
        if (jj_scan_token(XOR))
            return true;
        if (jj_3R_103())
            return true;
        return false;
    }

    private boolean jj_3R_107()
    {
        if (jj_3R_109())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_114())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_104()
    {
        if (jj_scan_token(SC_AND))
            return true;
        if (jj_3R_97())
            return true;
        return false;
    }

    private boolean jj_3R_94()
    {
        if (jj_3R_73())
            return true;
        return false;
    }

    private boolean jj_3R_105()
    {
        if (jj_3R_107())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_112())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_101()
    {
        if (jj_scan_token(SC_OR))
            return true;
        if (jj_3R_91())
            return true;
        return false;
    }

    private boolean jj_3_16()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_3R_53())
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_93()
    {
        Token xsp;
        if (jj_3_16())
            return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_16())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_17())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_6()
    {
        if (jj_3R_46())
            return true;
        return false;
    }

    private boolean jj_3R_103()
    {
        if (jj_3R_105())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_110())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_102()
    {
        if (jj_scan_token(COMMA))
            return true;
        if (jj_3R_53())
            return true;
        return false;
    }

    private boolean jj_3R_98()
    {
        if (jj_scan_token(HOOK))
            return true;
        if (jj_3R_53())
            return true;
        if (jj_scan_token(COLON))
            return true;
        if (jj_3R_82())
            return true;
        return false;
    }

    private boolean jj_3R_100()
    {
        if (jj_3R_103())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_108())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_90()
    {
        if (jj_scan_token(NEW))
            return true;
        if (jj_3R_44())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_94())
        {
            jj_scanpos = xsp;
            if (jj_3R_95())
                return true;
        }
        return false;
    }

    private boolean jj_3_15()
    {
        if (jj_scan_token(NEW))
            return true;
        if (jj_3R_52())
            return true;
        if (jj_3R_93())
            return true;
        return false;
    }

    private boolean jj_3R_84()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15())
        {
            jj_scanpos = xsp;
            if (jj_3R_90())
                return true;
        }
        return false;
    }

    private boolean jj_3R_97()
    {
        if (jj_3R_100())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_106())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_99()
    {
        if (jj_3R_53())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_102())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_96()
    {
        if (jj_3R_99())
            return true;
        return false;
    }

    private boolean jj_3R_91()
    {
        if (jj_3R_97())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_104())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_57()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(43))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(42))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(41))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(46))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(9))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(25))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(37))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(49))
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_73()
    {
        if (jj_scan_token(LPAREN))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_96())
            jj_scanpos = xsp;
        if (jj_scan_token(RPAREN))
            return true;
        return false;
    }

    private boolean jj_3R_46()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_57())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_58())
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(LPAREN))
            return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if (jj_3R_46())
            return true;
        return false;
    }

    private boolean jj_3R_88()
    {
        if (jj_3R_91())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_101())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_45()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(9))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(25))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(43))
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3_4()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_45())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(CLASS))
            return true;
        return false;
    }

    private boolean jj_3R_43()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(43))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(42))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(41))
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_80()
    {
        if (jj_3R_83())
            return true;
        return false;
    }

    private boolean jj_3_3()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_43())
            jj_scanpos = xsp;
        if (jj_3R_44())
            return true;
        if (jj_scan_token(LPAREN))
            return true;
        return false;
    }

    private boolean jj_3R_82()
    {
        if (jj_3R_88())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_98())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_92()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(54))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(24))
                return true;
        }
        return false;
    }

    private boolean jj_3R_50()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(79))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(107))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(108))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(112))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(105))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(106))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(113))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(114))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(115))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(109))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(111))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(110))
                                                        return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_21()
    {
        if (jj_3R_55())
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3_10()
    {
        if (jj_3R_49())
            return true;
        if (jj_3R_50())
            return true;
        return false;
    }

    private boolean jj_3R_81()
    {
        if (jj_3R_49())
            return true;
        if (jj_3R_50())
            return true;
        if (jj_3R_53())
            return true;
        return false;
    }

    private boolean jj_3R_89()
    {
        if (jj_3R_92())
            return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_3R_42())
            return true;
        return false;
    }

    private boolean jj_3R_68()
    {
        if (jj_3R_82())
            return true;
        return false;
    }

    private boolean jj_3R_53()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_67())
        {
            jj_scanpos = xsp;
            if (jj_3R_68())
                return true;
        }
        return false;
    }

    private boolean jj_3R_67()
    {
        if (jj_3R_81())
            return true;
        return false;
    }

    private boolean jj_3R_83()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(59))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(63))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(65))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(66))
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_89())
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(39))
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_41()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(9))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(25))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(43))
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3_1()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_41())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(CLASS))
            return true;
        return false;
    }

    private boolean jj_3R_87()
    {
        if (jj_3R_73())
            return true;
        return false;
    }

    private boolean jj_3R_86()
    {
        if (jj_scan_token(DOT))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_79()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_85())
        {
            jj_scanpos = xsp;
            if (jj_3R_86())
            {
                jj_scanpos = xsp;
                if (jj_3R_87())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_85()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_3R_53())
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_64()
    {
        if (jj_3R_79())
            return true;
        return false;
    }

    private boolean jj_3R_78()
    {
        if (jj_3R_84())
            return true;
        return false;
    }

    private boolean jj_3_9()
    {
        if (jj_scan_token(DOT))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_135()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_77()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_53())
            return true;
        if (jj_scan_token(RPAREN))
            return true;
        return false;
    }

    private boolean jj_3R_44()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_9())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_76()
    {
        if (jj_scan_token(SUPER))
            return true;
        if (jj_scan_token(DOT))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_75()
    {
        if (jj_3R_44())
            return true;
        return false;
    }

    private boolean jj_3R_136()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_134()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(92))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(93))
                return true;
        }
        return false;
    }

    private boolean jj_3R_63()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_74())
        {
            jj_scanpos = xsp;
            if (jj_3R_75())
            {
                jj_scanpos = xsp;
                if (jj_scan_token(50))
                {
                    jj_scanpos = xsp;
                    if (jj_3R_76())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_77())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_78())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_74()
    {
        if (jj_3R_83())
            return true;
        return false;
    }

    private boolean jj_3R_71()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_72()
    {
        if (jj_3R_55())
            return true;
        return false;
    }

    private boolean jj_3R_58()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(56))
        {
            jj_scanpos = xsp;
            if (jj_3R_72())
                return true;
        }
        return false;
    }

    private boolean jj_3R_49()
    {
        if (jj_3R_63())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_64())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_133()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_44())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_136())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN))
            return true;
        if (jj_3R_126())
            return true;
        return false;
    }

    private boolean jj_3R_70()
    {
        if (jj_3R_44())
            return true;
        return false;
    }

    private boolean jj_3_20()
    {
        if (jj_3R_49())
            return true;
        if (jj_3R_50())
            return true;
        return false;
    }

    private boolean jj_3R_131()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_14())
        {
            jj_scanpos = xsp;
            if (jj_3R_133())
                return true;
        }
        return false;
    }

    private boolean jj_3_14()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_52())
            return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_135())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(RPAREN))
            return true;
        if (jj_3R_117())
            return true;
        return false;
    }

    private boolean jj_3_13()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_44())
            return true;
        if (jj_scan_token(LBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_132()
    {
        if (jj_3R_49())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_134())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_52()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(10))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(15))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(12))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(45))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(34))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(36))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(27))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(21))
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_66()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_44())
            return true;
        if (jj_scan_token(RPAREN))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(82))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(70))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(67))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(50))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(47))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(38))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_80())
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_69()
    {
        if (jj_3R_52())
            return true;
        return false;
    }

    private boolean jj_3R_65()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_44())
            return true;
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_55()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_69())
        {
            jj_scanpos = xsp;
            if (jj_3R_70())
                return true;
        }
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_71())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_51()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_12())
        {
            jj_scanpos = xsp;
            if (jj_3R_65())
            {
                jj_scanpos = xsp;
                if (jj_3R_66())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3_12()
    {
        if (jj_scan_token(LPAREN))
            return true;
        if (jj_3R_52())
            return true;
        return false;
    }

    private boolean jj_3_11()
    {
        if (jj_3R_51())
            return true;
        return false;
    }

    private boolean jj_3R_130()
    {
        if (jj_3R_132())
            return true;
        return false;
    }

    private boolean jj_3_19()
    {
        if (jj_3R_55())
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_42()
    {
        if (jj_scan_token(STATIC))
            return true;
        if (jj_3R_56())
            return true;
        return false;
    }

    private boolean jj_3R_129()
    {
        if (jj_3R_131())
            return true;
        return false;
    }

    private boolean jj_3R_128()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(82))
                return true;
        }
        if (jj_3R_117())
            return true;
        return false;
    }

    private boolean jj_3R_126()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_128())
        {
            jj_scanpos = xsp;
            if (jj_3R_129())
            {
                jj_scanpos = xsp;
                if (jj_3R_130())
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_62()
    {
        if (jj_scan_token(SUPER))
            return true;
        if (jj_3R_73())
            return true;
        return false;
    }

    private boolean jj_3R_48()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_61())
        {
            jj_scanpos = xsp;
            if (jj_3R_62())
                return true;
        }
        return false;
    }

    private boolean jj_3_8()
    {
        if (jj_3R_48())
            return true;
        return false;
    }

    private boolean jj_3R_61()
    {
        if (jj_scan_token(THIS))
            return true;
        if (jj_3R_73())
            return true;
        return false;
    }

    private boolean jj_3R_125()
    {
        if (jj_scan_token(DECR))
            return true;
        if (jj_3R_49())
            return true;
        return false;
    }

    private boolean jj_3R_123()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(94))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(95))
                return true;
        }
        if (jj_3R_115())
            return true;
        return false;
    }

    private boolean jj_3R_127()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(96))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(97))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(101))
                    return true;
            }
        }
        if (jj_3R_117())
            return true;
        return false;
    }

    private boolean jj_3R_56()
    {
        if (jj_scan_token(LBRACE))
            return true;
        return false;
    }

    private boolean jj_3R_124()
    {
        if (jj_scan_token(INCR))
            return true;
        if (jj_3R_49())
            return true;
        return false;
    }

    private boolean jj_3_7()
    {
        if (jj_scan_token(COMMA))
            return true;
        if (jj_3R_47())
            return true;
        return false;
    }

    private boolean jj_3R_54()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(COLON))
            return true;
        return false;
    }

    private boolean jj_3R_122()
    {
        if (jj_3R_126())
            return true;
        return false;
    }

    private boolean jj_3R_118()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(102))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(103))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(104))
                    return true;
            }
        }
        if (jj_3R_113())
            return true;
        return false;
    }

    private boolean jj_3R_121()
    {
        if (jj_3R_125())
            return true;
        return false;
    }

    private boolean jj_3R_120()
    {
        if (jj_3R_124())
            return true;
        return false;
    }

    private boolean jj_3_17()
    {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }
    /** Generated Token Manager. */
    public JavaParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int tokenType;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[103];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    static
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[]
                {
                    0x0, 0x0, 0x2010200, 0x0, 0x200, 0x2000200, 0x2000200, 0x800000, 0x80000000, 0xa219600, 0xa209400, 0x2000200, 0x2000200, 0x200, 0x200, 0x800000, 0xa209600, 0xa209400, 0x2000000, 0x2000000, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x1000000, 0x2000200, 0x2000200, 0x0, 0x0, 0x0, 0x0, 0x8209400, 0x0, 0x0, 0x0, 0x59349c00, 0x0, 0x8209400, 0x0, 0x8209400, 0x8209400, 0x0, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x0, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x1000000, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x51140800, 0x59349c00, 0x51140800, 0x0, 0x0, 0x1000000, 0x82000, 0x59349c00, 0x82000, 0x400000, 0x9209400, 0x1000000, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x1000000, 0x4000, 0x4000000,
                };
    }

    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[]
                {
                    0x100, 0x1, 0x808, 0x0, 0x808, 0x800, 0x800, 0x0, 0x0, 0x3226e34, 0x2206e14, 0x24e20, 0x24e20, 0x800, 0x800, 0x0, 0x3226e34, 0x2206e14, 0x2204e00, 0x2204e00, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x884480c0, 0x24e20, 0x24e20, 0x100000, 0x0, 0x0, 0x0, 0x2014, 0xe00, 0xe00, 0x100000, 0x8ccfb0d4, 0x48000, 0x2014, 0x0, 0x2014, 0x1002014, 0x0, 0x884480c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x0, 0x884480c0, 0x884480c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x88400080, 0x400000, 0x884480c0, 0x0, 0x0, 0x40, 0x8ccf90c0, 0x8ccfb0d4, 0x8ccf90c0, 0x0, 0x0, 0x884480c0, 0x0, 0x8ccfb0d4, 0x0, 0x0, 0x8844a0d4, 0x884480c0, 0x884480c0, 0x884480c0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x0,
                };
    }

    private static void jj_la1_init_2()
    {
        jj_la1_2 = new int[]
                {
                    0x0, 0x0, 0x1000, 0x4000, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x0, 0x2000, 0x8000, 0x400, 0xf00c014e, 0x2000, 0xf00c014e, 0x0, 0x0, 0x0, 0x1100, 0x400, 0x2000, 0x8, 0x0, 0x0, 0x0, 0x3000114e, 0x0, 0x8, 0x400, 0x0, 0x8, 0x2000, 0xf00c004e, 0x8000, 0x100000, 0x4000000, 0x8000000, 0x0, 0x0, 0x0, 0x2400000, 0x2400000, 0x0, 0x1830000, 0x1830000, 0x0, 0x0, 0xc0000000, 0xc0000000, 0x0, 0x0, 0xc0000000, 0xf00c004e, 0xc0000, 0xc0000, 0x4e, 0xc004e, 0x40, 0x30000000, 0x30000000, 0x400, 0x400, 0x40, 0x4440, 0x4e, 0x4440, 0x6, 0x0, 0xf00c004e, 0x2000, 0x440, 0x0, 0x3000114e, 0x3000114e, 0x3000114e, 0x2000, 0x30000000, 0x4e, 0x0, 0x3000114e, 0x0, 0x0, 0x3000004e, 0xf00c004e, 0x3000004e, 0x3000004e, 0x2000, 0x8, 0x8, 0xf00c004e, 0x0, 0x0,
                };
    }

    private static void jj_la1_init_3()
    {
        jj_la1_3 = new int[]
                {
                    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe00, 0x0, 0x0, 0x0, 0x8, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c0, 0x1c0, 0x0, 0x0, 0x23, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                };
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[21];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public JavaParser(java.io.InputStream stream)
    {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public JavaParser(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e.toString());
        }
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream)
    {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e.toString());
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public JavaParser(java.io.Reader stream)
    {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void reInit(java.io.Reader stream)
    {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public JavaParser(JavaParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(JavaParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        tokenType = -1;
        jj_gen = 0;
        for (int i = 0; i < 103; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token consumeToken(int kind) throws JavaParserException
    {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        tokenType = -1;
        if (token.kind == kind)
        {
            jj_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error
    {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            else
                jj_lastpos = jj_scanpos = jj_scanpos.next;
        } else
            jj_scanpos = jj_scanpos.next;
        if (jj_rescan)
        {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos)
            {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken()
    {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        tokenType = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index)
    {
        Token t = token;
        for (int i = 0; i < index; i++)
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        return t;
    }

    private int getToken()
    {
        if ((jj_nt = token.next) == null)
            return (tokenType = (token.next = token_source.getNextToken()).kind);
        else
            return (tokenType = jj_nt.kind);
    }
    private org.pabloid.util.ArrayList jj_expentries = new org.pabloid.util.ArrayList();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1)
            jj_lasttokens[jj_endpos++] = kind;
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++)
                jj_expentry[i] = jj_lasttokens[i];
            jj_entries_loop:
            for (org.pabloid.util.Iterator it = jj_expentries.iterator(); it.hasNext();)
            {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length)
                {
                    for (int i = 0; i < jj_expentry.length; i++)
                        if (oldentry[i] != jj_expentry[i])
                            continue jj_entries_loop;
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public JavaParserException generateParseException()
    {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[116];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 103; i++)
            if (jj_la1[i] == jj_gen)
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                        la1tokens[j] = true;
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                        la1tokens[32 + j] = true;
                    if ((jj_la1_2[i] & (1 << j)) != 0)
                        la1tokens[64 + j] = true;
                    if ((jj_la1_3[i] & (1 << j)) != 0)
                        la1tokens[96 + j] = true;
                }
        for (int i = 0; i < 116; i++)
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++)
            exptokseq[i] = (int[]) jj_expentries.get(i);
        return new JavaParserException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing()
    {
    }

    /** Disable tracing. */
    final public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 21; i++)
            try
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls)
            {
            }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen)
        {
            if (p.next == null)
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }
}
